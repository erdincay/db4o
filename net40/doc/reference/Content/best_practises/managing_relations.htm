<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Best Practices" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>Managing Relations</title>
        <link href="../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../index_CSH.html#best_practises/managing_relations.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../best_practises.htm">Best Practices</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">1-N Relation: Navigating from 1 to N</span>
        </div>
        <script type="text/javascript">/*<![CDATA[*/
			document.write("<a href=\"" + location.href +"\">");
			document.write("Direct Link to this Article");
			document.write('</a>');/*]]>*/</script>
        <h1><a name="kanchor107"></a>Managing Relations</h1>
        <p>In db4o you manage relations by storing references to other objects. In db4o navigational access is usually a lot faster than queries. Therefore think about how you navigate to the right information. This topic gives an overview how to manage different relations.</p>
        <h2><a name="1toN-nav"></a>1-N Relation: Navigating from 1 to N.</h2>
        <p>As example we use shopping cards which hold items. In most use cases you need to know which items are on a card. For that you navigate from the card (the 1-part) to the items (the N-part). In this case you simply can use a collection on the shopping card which references all items.</p>
        <p>Keep in mind that a <a href="../basics/querying/soda/soda_performance_characteristics.htm#CollectionContains">contains-query on collections is very slow</a>. Finding out which items are on a certain shopping cards is very slow. If you want to know that, take a look at the suggestions below.</p>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">private</span>  <![CDATA[ ]]><span style="color:Blue;">readonly</span> ICollection&lt;Item&gt; items = <span style="color:Blue;">new</span> HashSet&lt;Item&gt;();

<span style="color:Blue;">public</span>  <![CDATA[ ]]><span style="color:Blue;">void</span> Add(Item terrain)
{
    items.Add(terrain);
}

<span style="color:Blue;">public</span>  <![CDATA[ ]]><span style="color:Blue;">void</span> Remove(Item o)
{
    items.Remove(o);
}</pre>
            <div class="codesnippet-meta">ShoppingCard.cs: Simple 1-n relation. Navigating from the card to the items
			<div class="codedownload"><a href="../CodeExamples/practises/relations/Example-practises-relations-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">Private</span>  <![CDATA[ ]]><span style="color:Blue;">ReadOnly</span> items <span style="color:Blue;">As</span> ICollection(Of Item) = <span style="color:Blue;">New</span> HashSet(Of Item)()

<span style="color:Blue;">Public</span>  <![CDATA[ ]]><span style="color:Blue;">Sub</span> Add(terrain <span style="color:Blue;">As</span> Item)
    items.Add(terrain)
<span style="color:Blue;">End</span>  <![CDATA[ ]]><span style="color:Blue;">Sub</span>

<span style="color:Blue;">Public</span>  <![CDATA[ ]]><span style="color:Blue;">Sub</span> Remove(o <span style="color:Blue;">As</span> Item)
    items.Remove(o)
<span style="color:Blue;">End</span>  <![CDATA[ ]]><span style="color:Blue;">Sub</span></pre>
            <div class="codesnippet-meta">ShoppingCard.vb: Simple 1-n relation. Navigating from the card to the items
			<div class="codedownload"><a href="../CodeExamples/practises/relations/Example-practises-relations-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h2><a name="Nto1-nav"></a>1-N Relation: Navigating from N to 1</h2>
        <p>Imagine that you store people and in which country a person is born. Here you usually navigate from the person (the N-part) to the country (the 1-part). Therefore you can have a field which refers to the country.</p>
        <p>In the rare case where you want to know all people born in a certain country you can do a query. When the country reference is <a href="../basics/indexing.htm">indexed</a>, then that query is fast.</p>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Green;">// Optionally we can index this field, when we want to find all people for a certain country</span>
<span style="color:Blue;">private</span> Country bornIn;

<span style="color:Blue;">public</span> Country BornIn
{
    <span style="color:Blue;">get</span> { <span style="color:Blue;">return</span> bornIn; }
}</pre>
            <div class="codesnippet-meta">Person.cs: Simple 1-n relation. Navigating from the person to the countries
			<div class="codedownload"><a href="../CodeExamples/practises/relations/Example-practises-relations-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Green;">' Optionally we can index this field, when we want to find all people for a certain country</span>
<span style="color:Blue;">Private</span> m_bornIn <span style="color:Blue;">As</span> Country

<span style="color:Blue;">Public</span>  <![CDATA[ ]]><span style="color:Blue;">ReadOnly</span>  <![CDATA[ ]]><span style="color:Blue;">Property</span> BornIn() <span style="color:Blue;">As</span> Country
    <span style="color:Blue;">Get</span>
        <span style="color:Blue;">Return</span> m_bornIn
    <span style="color:Blue;">End</span>  <![CDATA[ ]]><span style="color:Blue;">Get</span>
<span style="color:Blue;">End</span>  <![CDATA[ ]]><span style="color:Blue;">Property</span></pre>
            <div class="codesnippet-meta">Person.vb: Simple 1-n relation. Navigating from the person to the countries
			<div class="codedownload"><a href="../CodeExamples/practises/relations/Example-practises-relations-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <p>Getting all people of a country is not that hard and fast when the ‘bornIn’ field is indexed.</p>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">var</span> country = LoadCountry(container, <span style="color:#A31515;">"USA"</span>);
<span style="color:Blue;">var</span> peopleBurnInTheUs = <span style="color:Blue;">from</span> Person p <span style="color:Blue;">in</span> container
                        <span style="color:Blue;">where</span> p.BornIn == country
                        <span style="color:Blue;">select</span> p;</pre>
            <div class="codesnippet-meta">RelationManagementExamples.cs: Query for people burn in a country
			<div class="codedownload"><a href="../CodeExamples/practises/relations/Example-practises-relations-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">Dim</span> country = LoadCountry(container, <span style="color:#A31515;">"USA"</span>)
<span style="color:Blue;">Dim</span> peopleBurnInTheUs = <span style="color:Blue;">From</span> p <span style="color:Blue;">As</span> Person <span style="color:Blue;">In</span> container _
        <span style="color:Blue;">Where</span> p.BornIn <span style="color:Blue;">Is</span> country _
        <span style="color:Blue;">Select</span> p</pre>
            <div class="codesnippet-meta">RelationManagementExamples.vb: Query for people burn in a country
			<div class="codedownload"><a href="../CodeExamples/practises/relations/Example-practises-relations-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h2><a name="1toN-bidirect"></a>1-N Relation: Bidirectional</h2>
        <p>When you want to navigate a 1-N relationship bidirectional you can use the method above, because the query if fast enough. Just ensure that you index the field holding the reference.</p>
        <p>Alternatively you also can add an additional collection which holds the items. However in that case you need to manually manage the consistency of the relation.</p>
        <p>For example the relationship between dogs and their owners. The dog has a field with its owner, while the person has a collection of his dogs. The setters then manage the relationship and ensure that it is always consistent.</p>
        <h2><a name="NtoN-nav"></a>N-N Relations: One Way Navigation</h2>
        <p>Like 1-N relations N-N relations also can be one directional. For example a person can have multiple citizenships in different countries. Let's suppose that you only want to know the citizenship of a person and not the citizens of a country. Then you navigate from people to countries. You can store that in a simple collection.</p>
        <p>Keep in mind that a <a href="../basics/querying/soda/soda_performance_characteristics.htm#CollectionContains">contains-query on a collection is very slow</a>. Finding the people of a certain country will be very slow.</p>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">private</span>  <![CDATA[ ]]><span style="color:Blue;">readonly</span> ICollection&lt;Country&gt; citizenIn = <span style="color:Blue;">new</span> HashSet&lt;Country&gt;();

<span style="color:Blue;">public</span>  <![CDATA[ ]]><span style="color:Blue;">void</span> RemoveCitizenship(Country o)
{
    citizenIn.Remove(o);
}

<span style="color:Blue;">public</span>  <![CDATA[ ]]><span style="color:Blue;">void</span> AddCitizenship(Country country)
{
    citizenIn.Add(country);
}</pre>
            <div class="codesnippet-meta">Person.cs: One directional N-N relation
			<div class="codedownload"><a href="../CodeExamples/practises/relations/Example-practises-relations-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">Private</span>  <![CDATA[ ]]><span style="color:Blue;">ReadOnly</span> citizenIn <span style="color:Blue;">As</span> ICollection(Of Country) = <span style="color:Blue;">New</span> HashSet(Of Country)()

<span style="color:Blue;">Public</span>  <![CDATA[ ]]><span style="color:Blue;">Sub</span> RemoveCitizenship(o <span style="color:Blue;">As</span> Country)
    citizenIn.Remove(o)
<span style="color:Blue;">End</span>  <![CDATA[ ]]><span style="color:Blue;">Sub</span>

<span style="color:Blue;">Public</span>  <![CDATA[ ]]><span style="color:Blue;">Sub</span> AddCitizenship(country <span style="color:Blue;">As</span> Country)
    citizenIn.Add(country)
<span style="color:Blue;">End</span>  <![CDATA[ ]]><span style="color:Blue;">Sub</span></pre>
            <div class="codesnippet-meta">Person.vb: One directional N-N relation
			<div class="codedownload"><a href="../CodeExamples/practises/relations/Example-practises-relations-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h2><a name="NtoN-bidirect"></a>N-N Relations: Bidirectional Navigation</h2>
        <p>For managing bidirectional N-N relations you can use collections, but maintain a collection on both sides. For example a club has a member-list and each member has a list of clubs where he is a member.</p>
        <p>Keep in mind that a <a href="../basics/querying/soda/soda_performance_characteristics.htm#CollectionContains">contains-query on a collection is very slow</a>. That's why you maintain two collections, so that you can navigate to the club-members or club-membership. </p>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">private</span>  <![CDATA[ ]]><span style="color:Blue;">readonly</span> ICollection&lt;Person&gt; members = <span style="color:Blue;">new</span> HashSet&lt;Person&gt;();

<span style="color:Blue;">public</span>  <![CDATA[ ]]><span style="color:Blue;">void</span> AddMember(Person person)
{
    <span style="color:Blue;">if</span> (!members.Contains(person))
    {
        members.Add(person);
        person.Join(<span style="color:Blue;">this</span>);
    }
}

<span style="color:Blue;">public</span>  <![CDATA[ ]]><span style="color:Blue;">void</span> RemoveMember(Person person)
{
    <span style="color:Blue;">if</span> (members.Contains(person))
    {
        members.Remove(person);
        person.Leave(<span style="color:Blue;">this</span>);
    }
}</pre>
            <div class="codesnippet-meta">Club.cs: Bidirectional N-N relation
			<div class="codedownload"><a href="../CodeExamples/practises/relations/Example-practises-relations-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">Private</span>  <![CDATA[ ]]><span style="color:Blue;">ReadOnly</span> m_members <span style="color:Blue;">As</span> ICollection(Of Person) = <span style="color:Blue;">New</span> HashSet(Of Person)()

<span style="color:Blue;">Public</span>  <![CDATA[ ]]><span style="color:Blue;">Sub</span> AddMember(person <span style="color:Blue;">As</span> Person)
    <span style="color:Blue;">If</span>  <![CDATA[ ]]><span style="color:Blue;">Not</span> m_members.Contains(person) <span style="color:Blue;">Then</span>
        m_members.Add(person)
        person.<span style="color:Blue;">Join</span>(<span style="color:Blue;">Me</span>)
    <span style="color:Blue;">End</span>  <![CDATA[ ]]><span style="color:Blue;">If</span>
<span style="color:Blue;">End</span>  <![CDATA[ ]]><span style="color:Blue;">Sub</span>

<span style="color:Blue;">Public</span>  <![CDATA[ ]]><span style="color:Blue;">Sub</span> RemoveMember(person <span style="color:Blue;">As</span> Person)
    <span style="color:Blue;">If</span> m_members.Contains(person) <span style="color:Blue;">Then</span>
        m_members.Remove(person)
        person.Leave(<span style="color:Blue;">Me</span>)
    <span style="color:Blue;">End</span>  <![CDATA[ ]]><span style="color:Blue;">If</span>
<span style="color:Blue;">End</span>  <![CDATA[ ]]><span style="color:Blue;">Sub</span></pre>
            <div class="codesnippet-meta">Club.vb: Bidirectional N-N relation
			<div class="codedownload"><a href="../CodeExamples/practises/relations/Example-practises-relations-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">private</span>  <![CDATA[ ]]><span style="color:Blue;">readonly</span> ICollection&lt;Club&gt; memberIn = <span style="color:Blue;">new</span> HashSet&lt;Club&gt;();

<span style="color:Blue;">public</span>  <![CDATA[ ]]><span style="color:Blue;">void</span> Join(Club club)
{
    <span style="color:Blue;">if</span> (!memberIn.Contains(club))
    {
        memberIn.Add(club);
        club.AddMember(<span style="color:Blue;">this</span>);
    }
}

<span style="color:Blue;">public</span>  <![CDATA[ ]]><span style="color:Blue;">void</span> Leave(Club club)
{
    <span style="color:Blue;">if</span> (memberIn.Contains(club))
    {
        memberIn.Remove(club);
        club.RemoveMember(<span style="color:Blue;">this</span>);
    }
}

<span style="color:Blue;">public</span> IEnumerable&lt;Club&gt; MemberOf
{
    <span style="color:Blue;">get</span> { <span style="color:Blue;">return</span> memberIn; }
}</pre>
            <div class="codesnippet-meta">Person.cs: Bidirectional N-N relation
			<div class="codedownload"><a href="../CodeExamples/practises/relations/Example-practises-relations-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">Private</span>  <![CDATA[ ]]><span style="color:Blue;">ReadOnly</span> memberIn <span style="color:Blue;">As</span> ICollection(Of Club) = <span style="color:Blue;">New</span> HashSet(Of Club)()

<span style="color:Blue;">Public</span>  <![CDATA[ ]]><span style="color:Blue;">Sub</span>  <![CDATA[ ]]><span style="color:Blue;">Join</span>(club <span style="color:Blue;">As</span> Club)
    <span style="color:Blue;">If</span>  <![CDATA[ ]]><span style="color:Blue;">Not</span> memberIn.Contains(club) <span style="color:Blue;">Then</span>
        memberIn.Add(club)
        club.AddMember(<span style="color:Blue;">Me</span>)
    <span style="color:Blue;">End</span>  <![CDATA[ ]]><span style="color:Blue;">If</span>
<span style="color:Blue;">End</span>  <![CDATA[ ]]><span style="color:Blue;">Sub</span>

<span style="color:Blue;">Public</span>  <![CDATA[ ]]><span style="color:Blue;">Sub</span> Leave(club <span style="color:Blue;">As</span> Club)
    <span style="color:Blue;">If</span> memberIn.Contains(club) <span style="color:Blue;">Then</span>
        memberIn.Remove(club)
        club.RemoveMember(<span style="color:Blue;">Me</span>)
    <span style="color:Blue;">End</span>  <![CDATA[ ]]><span style="color:Blue;">If</span>
<span style="color:Blue;">End</span>  <![CDATA[ ]]><span style="color:Blue;">Sub</span>

<span style="color:Blue;">Public</span>  <![CDATA[ ]]><span style="color:Blue;">ReadOnly</span>  <![CDATA[ ]]><span style="color:Blue;">Property</span> MemberOf() <span style="color:Blue;">As</span> IEnumerable(Of Club)
    <span style="color:Blue;">Get</span>
        <span style="color:Blue;">Return</span> memberIn
    <span style="color:Blue;">End</span>  <![CDATA[ ]]><span style="color:Blue;">Get</span>
<span style="color:Blue;">End</span>  <![CDATA[ ]]><span style="color:Blue;">Property</span></pre>
            <div class="codesnippet-meta">Person.vb: Bidirectional N-N relation
			<div class="codedownload"><a href="../CodeExamples/practises/relations/Example-practises-relations-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <script src="../Resources/Code/jquery.min.js">
        </script>
        <script src="../Resources/Code/ZeroClipboard.js">
        </script>
        <script type="text/javascript">/* <![CDATA[ */
window.onload = function(){
	var pathToFlash = $('html').attr('MadCap:PathToHelpSystem') + 'Content/Resources/Code/ZeroClipboard.swf';
	ZeroClipboard.setMoviePath(pathToFlash);
			
	function bindToClipBord(element,content){
		var clip = new ZeroClipboard.Client();
		clip.setText(content);
		clip.glue(element);
	};
		
	if(location.protocol==='file:'){
		$('.copylink-marker').remove();
	} else{
			$('.copylink-marker').each(function(){
				var text = $(this).parent().parent().children('.prettyprint').text();
				$(this).hover(function(){
					bindToClipBord(this,text);
				},
				function(){});
			});	
	}		
};
                /* ]]> */</script>
        <script type="text/javascript" src="../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>