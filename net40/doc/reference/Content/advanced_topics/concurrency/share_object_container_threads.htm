<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Advanced Features|Concurrency and db4o" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>Sharing an Object Container Across Threads</title>
        <link href="../../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="../../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../../index_CSH.html#advanced_topics/concurrency/share_object_container_threads.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../../advanced_topics.htm">Advanced Features</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../concurrency.htm">Concurrency and db4o</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Example</span>
        </div>
        <script type="text/javascript">/*<![CDATA[*/
			document.write("<a href=\"" + location.href +"\">");
			document.write("Direct Link to this Article");
			document.write('</a>');/*]]>*/</script>
        <h1><a name="kanchor47"></a>Sharing an Object Container Across Threads</h1>
        <p>You want to share an object container across different threads? Then you automatically also share the stored objects across threads, due to the <a href="../../basics/indentity_concept/reference_cache.htm">reference-cache</a>. Therefore you need to synchronize the access to your object-model. </p>
        <p>The basic access-pattern should be like this:</p>
        <ol>
            <li value="1">Access the lock which protects the data model.</li>
            <li value="2">Do manipulations on the data model, which may involve operations on the object container.</li>
            <li value="3">Release the lock.</li>
        </ol>
        <h2><a name="Example"></a>A Small Example</h2>
        <p>For example we want to do some back-ground updates, while the rest of the application carries on. As soon as we have this kind pattern we need to protect the access to the data model.</p>
        <p>For example  this operation starts a background task and carries on doing other things:</p>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Green;">// Schedule back-ground tasks</span>
Action&lt;IObjectContainer&gt; toRun =  UpdateSomePeople;
<span style="color:Blue;">var</span> waitHandle = toRun.BeginInvoke(container, <span style="color:Blue;">null</span>, <span style="color:Blue;">null</span>);

<span style="color:Green;">// While doing other work</span>
ListAllPeople(container);</pre>
            <div class="codesnippet-meta">LockingOperations.cs: Schedule back-ground tasks
			<div class="codedownload"><a href="../../CodeExamples/concurrency/locking/Example-concurrency-locking-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Green;">' Schedule back-ground tasks</span>
<span style="color:Blue;">Dim</span> toRun <span style="color:Blue;">As</span> Action(Of IObjectContainer) = <span style="color:Blue;">AddressOf</span> UpdateSomePeople
<span style="color:Blue;">Dim</span> waitHandle = toRun.BeginInvoke(container, <span style="color:Blue;">Nothing</span>, <span style="color:Blue;">Nothing</span>)

<span style="color:Green;">' While doing other work</span>
ListAllPeople(container)</pre>
            <div class="codesnippet-meta">LockingOperations.vb: Schedule back-ground tasks
			<div class="codedownload"><a href="../../CodeExamples/concurrency/locking/Example-concurrency-locking-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <p>Unfortunately these two tasks do work on the same data model, which can lead to race conditions. Therefore access to the data model has to be protected.</p>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">private</span>  <![CDATA[ ]]><span style="color:Blue;">void</span> UpdateSomePeople(IObjectContainer container)
{
    <span style="color:Blue;">lock</span> (dataLock)
    {
        <span style="color:Blue;">var</span> people = <span style="color:Blue;">from</span> Person p <span style="color:Blue;">in</span> container
                     <span style="color:Blue;">where</span> p.Name.Equals(<span style="color:#A31515;">"Joe"</span>)
                     <span style="color:Blue;">select</span> p;
        <span style="color:Blue;">foreach</span> (Person joe <span style="color:Blue;">in</span> people)
        {
            joe.Name = <span style="color:#A31515;">"New Joe"</span>;
            container.Store(joe);
        }
    }
}</pre>
            <div class="codesnippet-meta">LockingOperations.cs: Grab the lock protecting the data
			<div class="codedownload"><a href="../../CodeExamples/concurrency/locking/Example-concurrency-locking-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">Private</span>  <![CDATA[ ]]><span style="color:Blue;">Function</span> UpdateSomePeople(container <span style="color:Blue;">As</span> IObjectContainer) <span style="color:Blue;">As</span>  <![CDATA[ ]]><span style="color:Blue;">Boolean</span>
    <span style="color:Blue;">SyncLock</span> dataLock
        <span style="color:Blue;">Dim</span> people = <span style="color:Blue;">From</span> p <span style="color:Blue;">As</span> Person <span style="color:Blue;">In</span> container <span style="color:Blue;">Where</span> p.Name.<span style="color:Blue;">Equals</span>(<span style="color:#A31515;">"Joe"</span>) <span style="color:Blue;">Select</span> p
        <span style="color:Blue;">For</span>  <![CDATA[ ]]><span style="color:Blue;">Each</span> joe <span style="color:Blue;">As</span> Person <span style="color:Blue;">In</span> people
            joe.Name = <span style="color:#A31515;">"New Joe"</span>
            container.Store(joe)
        <span style="color:Blue;">Next</span>
    <span style="color:Blue;">End</span>  <![CDATA[ ]]><span style="color:Blue;">SyncLock</span>
    <span style="color:Blue;">Return</span>  <![CDATA[ ]]><span style="color:Blue;">True</span>
<span style="color:Blue;">End</span>  <![CDATA[ ]]><span style="color:Blue;">Function</span></pre>
            <div class="codesnippet-meta">LockingOperations.vb: Grab the lock protecting the data
			<div class="codedownload"><a href="../../CodeExamples/concurrency/locking/Example-concurrency-locking-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">private</span>  <![CDATA[ ]]><span style="color:Blue;">void</span> ListAllPeople(IObjectContainer container)
{
    <span style="color:Blue;">lock</span> (dataLock)
    {
        <span style="color:Blue;">foreach</span> (Person person <span style="color:Blue;">in</span>  <![CDATA[ ]]><span style="color:Blue;">from</span> Person p <span style="color:Blue;">in</span> container <span style="color:Blue;">select</span> p)
        {
            Console.WriteLine(person.Name);
        }
    }
}</pre>
            <div class="codesnippet-meta">LockingOperations.cs: Grab the lock to show the data
			<div class="codedownload"><a href="../../CodeExamples/concurrency/locking/Example-concurrency-locking-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">Private</span>  <![CDATA[ ]]><span style="color:Blue;">Sub</span> ListAllPeople(container <span style="color:Blue;">As</span> IObjectContainer)
    <span style="color:Blue;">SyncLock</span> dataLock
        <span style="color:Blue;">For</span>  <![CDATA[ ]]><span style="color:Blue;">Each</span> person <span style="color:Blue;">In</span> (<span style="color:Blue;">From</span> p <span style="color:Blue;">As</span> Person <span style="color:Blue;">In</span> container <span style="color:Blue;">Select</span> p)
            Console.WriteLine(person.Name)
        <span style="color:Blue;">Next</span>
    <span style="color:Blue;">End</span>  <![CDATA[ ]]><span style="color:Blue;">SyncLock</span>
<span style="color:Blue;">End</span>  <![CDATA[ ]]><span style="color:Blue;">Sub</span></pre>
            <div class="codesnippet-meta">LockingOperations.vb: Grab the lock to show the data
			<div class="codedownload"><a href="../../CodeExamples/concurrency/locking/Example-concurrency-locking-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h2><a name="Improving"></a>Improving the Locking</h2>
        <p>Of course the locking showed above is very course grained. A simple improvement would be to use <a href="read_write_lock_example.htm">read-write locks</a>. In the end you need to adapt the locking strategy to your application. </p>
        <h2><a name="TransactionModel"></a>Creating a Transaction Model</h2>
        <p>One model which works good for this scenario is to create a transaction abstraction to do your operations on the data model. Then you do all operations in such a transaction. The transaction manages the lock and the db4o transaction. Such an implementation could look like this:</p>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">public</span> T InTransaction&lt;T&gt;(TransactionFunction&lt;T&gt; transactionClosure)
{
    <span style="color:Blue;">lock</span> (transactionLock)
    {
        <span style="color:Blue;">try</span>
        {
            <span style="color:Blue;">return</span> transactionClosure(database);
        }
        <span style="color:Blue;">catch</span> (Exception)
        {
            database.Rollback();
            <span style="color:Blue;">throw</span>;
        }
        <span style="color:Blue;">finally</span>
        {
            database.Commit();
        }
    }
}</pre>
            <div class="codesnippet-meta">DatabaseSupport.cs: A transaction method
			<div class="codedownload"><a href="../../CodeExamples/concurrency/transactions/Example-concurrency-transactions-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">Public</span>  <![CDATA[ ]]><span style="color:Blue;">Function</span> InTransaction(Of T)(transactionClosure <span style="color:Blue;">As</span> TransactionFunction(Of T)) <span style="color:Blue;">As</span> T
    <span style="color:Blue;">SyncLock</span> transactionLock
        <span style="color:Blue;">Try</span>
            <span style="color:Blue;">Return</span> transactionClosure(database)
        <span style="color:Blue;">Catch</span> generatedExceptionName <span style="color:Blue;">As</span> Exception
            database.Rollback()
            <span style="color:Blue;">Throw</span>
        <span style="color:Blue;">Finally</span>
            database.Commit()
        <span style="color:Blue;">End</span>  <![CDATA[ ]]><span style="color:Blue;">Try</span>
    <span style="color:Blue;">End</span>  <![CDATA[ ]]><span style="color:Blue;">SyncLock</span>
<span style="color:Blue;">End</span>  <![CDATA[ ]]><span style="color:Blue;">Function</span></pre>
            <div class="codesnippet-meta">DatabaseSupport.vb: A transaction method
			<div class="codedownload"><a href="../../CodeExamples/concurrency/transactions/Example-concurrency-transactions-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <p>And then we can use this transaction method when accessing our data model.</p>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">private</span>  <![CDATA[ ]]><span style="color:Blue;">void</span> ListAllPeople(DatabaseSupport dbSupport)
{
    dbSupport.InTransaction(
        container =&gt;
            {
                <span style="color:Blue;">var</span> result = <span style="color:Blue;">from</span> Person p <span style="color:Blue;">in</span> container <span style="color:Blue;">select</span> p;
                <span style="color:Blue;">foreach</span> (Person person <span style="color:Blue;">in</span> result)
                {
                    Console.WriteLine(person.Name);
                }
            });
}</pre>
            <div class="codesnippet-meta">TransactionOperations.cs: Use transaction for reading objects
			<div class="codedownload"><a href="../../CodeExamples/concurrency/transactions/Example-concurrency-transactions-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">Private</span>  <![CDATA[ ]]><span style="color:Blue;">Sub</span> ListAllPeople(dbSupport <span style="color:Blue;">As</span> DatabaseSupport)
    dbSupport.InTransaction(
        <span style="color:Blue;">Function</span>(container)
            <span style="color:Blue;">Dim</span> result = <span style="color:Blue;">From</span> p <span style="color:Blue;">As</span> Person <span style="color:Blue;">In</span> container <span style="color:Blue;">Select</span> p
            <span style="color:Blue;">For</span>  <![CDATA[ ]]><span style="color:Blue;">Each</span> person <span style="color:Blue;">As</span> Person <span style="color:Blue;">In</span> result
                Console.WriteLine(person.Name)
            <span style="color:Blue;">Next</span>
        <span style="color:Blue;">End</span>  <![CDATA[ ]]><span style="color:Blue;">Function</span>)
<span style="color:Blue;">End</span>  <![CDATA[ ]]><span style="color:Blue;">Sub</span></pre>
            <div class="codesnippet-meta">TransactionOperations.vb: Use transaction for reading objects
			<div class="codedownload"><a href="../../CodeExamples/concurrency/transactions/Example-concurrency-transactions-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">private</span>  <![CDATA[ ]]><span style="color:Blue;">void</span> UpdateAllJoes(DatabaseSupport dbSupport)
{
    dbSupport.InTransaction(
        container =&gt;
            {
                <span style="color:Blue;">var</span> allJoes = <span style="color:Blue;">from</span> Person p <span style="color:Blue;">in</span> container
                              <span style="color:Blue;">where</span> p.Name == <span style="color:#A31515;">"Joe"</span>
                              <span style="color:Blue;">select</span> p;
                <span style="color:Blue;">foreach</span> (Person joe <span style="color:Blue;">in</span> allJoes)
                {
                    joe.Name = <span style="color:#A31515;">"New Joe"</span>;
                    container.Store(joe);
                }
            });
}</pre>
            <div class="codesnippet-meta">TransactionOperations.cs: Use transaction to update objects
			<div class="codedownload"><a href="../../CodeExamples/concurrency/transactions/Example-concurrency-transactions-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">Private</span>  <![CDATA[ ]]><span style="color:Blue;">Sub</span> UpdateAllJoes(dbSupport <span style="color:Blue;">As</span> DatabaseSupport)
    dbSupport.InTransaction(
        <span style="color:Blue;">Function</span>(container)
            <span style="color:Blue;">Dim</span> allJoes = <span style="color:Blue;">From</span> p <span style="color:Blue;">As</span> Person <span style="color:Blue;">In</span> container _
                        <span style="color:Blue;">Where</span> p.Name = <span style="color:#A31515;">"Joe"</span> _
                        <span style="color:Blue;">Select</span> p
            <span style="color:Blue;">For</span>  <![CDATA[ ]]><span style="color:Blue;">Each</span> joe <span style="color:Blue;">As</span> Person <span style="color:Blue;">In</span> allJoes
                joe.Name = <span style="color:#A31515;">"New Joe"</span>
                container.Store(joe)
            <span style="color:Blue;">Next</span>
        <span style="color:Blue;">End</span>  <![CDATA[ ]]><span style="color:Blue;">Function</span>)
<span style="color:Blue;">End</span>  <![CDATA[ ]]><span style="color:Blue;">Sub</span></pre>
            <div class="codesnippet-meta">TransactionOperations.vb: Use transaction to update objects
			<div class="codedownload"><a href="../../CodeExamples/concurrency/transactions/Example-concurrency-transactions-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <p>Remember that this is only an example. You can use other techniques like annotations or aspects to implement the right behavior. And you also can use more sophisticated locks, like <a href="read_write_lock_example.htm#Read">read write locks</a>. The only thing which is important is that you synchronize the access your shared data objects. </p>
        <h2>Alternatives</h2>
        <p>Alternatively you can avoid sharing data objects and rather use multiple object container to manage concurrent data access. </p>
        <script src="../../Resources/Code/jquery.min.js">
        </script>
        <script src="../../Resources/Code/ZeroClipboard.js">
        </script>
        <script type="text/javascript">/* <![CDATA[ */
window.onload = function(){
	var pathToFlash = $('html').attr('MadCap:PathToHelpSystem') + 'Content/Resources/Code/ZeroClipboard.swf';
	ZeroClipboard.setMoviePath(pathToFlash);
			
	function bindToClipBord(element,content){
		var clip = new ZeroClipboard.Client();
		clip.setText(content);
		clip.glue(element);
	};
		
	if(location.protocol==='file:'){
		$('.copylink-marker').remove();
	} else{
			$('.copylink-marker').each(function(){
				var text = $(this).parent().parent().children('.prettyprint').text();
				$(this).hover(function(){
					bindToClipBord(this,text);
				},
				function(){});
			});	
	}		
};
                /* ]]> */</script>
        <script type="text/javascript" src="../../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>