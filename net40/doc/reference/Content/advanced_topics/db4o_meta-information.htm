<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Advanced Features" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>db4o Meta-Information</title>
        <link href="../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../index_CSH.html#advanced_topics/db4o_meta-information.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../advanced_topics.htm">Advanced Features</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">db4o Meta-Information</span>
        </div>
        <script type="text/javascript">/*<![CDATA[*/
			document.write("<a href=\"" + location.href +"\">");
			document.write("Direct Link to this Article");
			document.write('</a>');/*]]>*/</script>
        <h1><a name="kanchor44"></a>db4o Meta-Information</h1>
        <p>Db4o meta information API provides an access to the actual structure of db4o database file. Its primary use is <a href="refactoring_and_schema_evolution.htm">refactoring</a>.</p>
        <p>You can access the meta information via extended object container. You can ask the object container for all stored classes or for a specific class. To find the meta information for a specific class you can provide the full name, the class itself or an instance of a particular type.</p>
        <p>Note that db4o also returns information about internal db4o instances which have been stored. </p>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Green;">// Get the information about all stored classes.</span>
IStoredClass[] classesInDB = container.Ext().StoredClasses();
<span style="color:Blue;">foreach</span> (IStoredClass storedClass <span style="color:Blue;">in</span> classesInDB)
{
    Console.WriteLine(storedClass.GetName());
}

<span style="color:Green;">// Information for a certain class</span>
IStoredClass metaInfo = container.Ext().StoredClass(<span style="color:Blue;">typeof</span> (Person));</pre>
            <div class="codesnippet-meta">MetaInfoExample.cs: All stored classes
			<div class="codedownload"><a href="../CodeExamples/metainfo/Example-Code-metainfo-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Green;">' Get the information about all stored classes.</span>
<span style="color:Blue;">Dim</span> classesInDB <span style="color:Blue;">As</span> IStoredClass() = container.Ext().StoredClasses()
<span style="color:Blue;">For</span>  <![CDATA[ ]]><span style="color:Blue;">Each</span> storedClass <span style="color:Blue;">As</span> IStoredClass <span style="color:Blue;">In</span> classesInDB
    Console.WriteLine(storedClass.GetName())
<span style="color:Blue;">Next</span>

<span style="color:Green;">' Information for a certain class</span>
<span style="color:Blue;">Dim</span> metaInfo <span style="color:Blue;">As</span> IStoredClass = container.Ext().StoredClass(<span style="color:Blue;">GetType</span>(Person))</pre>
            <div class="codesnippet-meta">MetaInfoExample.vb: All stored classes
			<div class="codedownload"><a href="../CodeExamples/metainfo/Example-Code-metainfo-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <p>The stored class interface provides all meta information db4o knows about. You can get the name of the class, ask for the instance count, ask for a list of the ids and get the meta info for super classes.</p>
        <p>The most important information about the stored classes meta info is the list of the field which are stored. You can get a list of all fields or ask for specific fields. Note that the meta information might return information for fields which don't exist anymore. This is <a href="refactoring_and_schema_evolution/field_type_change.htm">useful for refactoring</a>. </p>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve">IStoredClass metaInfoForPerson = container.Ext().StoredClass(<span style="color:Blue;">typeof</span> (Person));
<span style="color:Green;">// Access all existing fields</span>
<span style="color:Blue;">foreach</span> (IStoredField field <span style="color:Blue;">in</span> metaInfoForPerson.GetStoredFields())
{
    Console.WriteLine(<span style="color:#A31515;">"Field: "</span> + field.GetName());
}
<span style="color:Green;">// Accessing the field 'name' of any type.</span>
IStoredField nameField = metaInfoForPerson.StoredField(<span style="color:#A31515;">"name"</span>, <span style="color:Blue;">null</span>);
<span style="color:Green;">// Accessing the string field 'name'. Important if this field had another time in previous</span>
<span style="color:Green;">// versions of the class model</span>
IStoredField ageField = metaInfoForPerson.StoredField(<span style="color:#A31515;">"age"</span>, <span style="color:Blue;">typeof</span> (<span style="color:Blue;">int</span>));

<span style="color:Green;">// Check if the field is indexed</span>
<span style="color:Blue;">bool</span> isAgeFieldIndexed = ageField.HasIndex();

<span style="color:Green;">// Get the type of the field</span>
<span style="color:Blue;">string</span> fieldType = ageField.GetStoredType().GetName();</pre>
            <div class="codesnippet-meta">MetaInfoExample.cs: Accessing stored fields
			<div class="codedownload"><a href="../CodeExamples/metainfo/Example-Code-metainfo-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">Dim</span> metaInfoForPerson <span style="color:Blue;">As</span> IStoredClass = container.Ext().StoredClass(<span style="color:Blue;">GetType</span>(Person))
<span style="color:Green;">' Access all existing fields</span>
<span style="color:Blue;">For</span>  <![CDATA[ ]]><span style="color:Blue;">Each</span> field <span style="color:Blue;">As</span> IStoredField <span style="color:Blue;">In</span> metaInfoForPerson.GetStoredFields()
    Console.WriteLine(<span style="color:#A31515;">"Field: "</span> &amp; field.GetName())
<span style="color:Blue;">Next</span>
<span style="color:Green;">' Accessing the field 'name' of any type.</span>
<span style="color:Blue;">Dim</span> nameField <span style="color:Blue;">As</span> IStoredField = metaInfoForPerson.StoredField(<span style="color:#A31515;">"name"</span>, <span style="color:Blue;">Nothing</span>)
<span style="color:Green;">' Accessing the string field 'name'. Important if this field had another time in previous</span>
<span style="color:Green;">' versions of the class model</span>
<span style="color:Blue;">Dim</span> ageField <span style="color:Blue;">As</span> IStoredField = metaInfoForPerson.StoredField(<span style="color:#A31515;">"age"</span>, <span style="color:Blue;">GetType</span>(<span style="color:Blue;">Integer</span>))

<span style="color:Green;">' Check if the field is indexed</span>
<span style="color:Blue;">Dim</span> isAgeFieldIndexed <span style="color:Blue;">As</span>  <![CDATA[ ]]><span style="color:Blue;">Boolean</span> = ageField.HasIndex()

<span style="color:Green;">' Get the type of the field</span>
<span style="color:Blue;">Dim</span> fieldType <span style="color:Blue;">As</span>  <![CDATA[ ]]><span style="color:Blue;">String</span> = ageField.GetStoredType().GetName()</pre>
            <div class="codesnippet-meta">MetaInfoExample.vb: Accessing stored fields
			<div class="codedownload"><a href="../CodeExamples/metainfo/Example-Code-metainfo-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <p>On a the field meta information you can find out the name, type and if the field has an index. And you also can access the values of a object via the stored field. This allows you to access information which is stored in the database but has been removed from the class model. This is <a href="refactoring_and_schema_evolution/field_type_change.htm">useful for refactoring</a>.</p>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve">IStoredClass metaForPerson = container.Ext().StoredClass(<span style="color:Blue;">typeof</span> (Person));
IStoredField metaNameField = metaForPerson.StoredField(<span style="color:#A31515;">"name"</span>, <span style="color:Blue;">null</span>);

IList&lt;Person&gt; persons = container.Query&lt;Person&gt;();
<span style="color:Blue;">foreach</span> (Person person <span style="color:Blue;">in</span> persons)
{
    <span style="color:Blue;">string</span> name = (<span style="color:Blue;">string</span>) metaNameField.Get(person);
    Console.WriteLine(<span style="color:#A31515;">"Name is "</span> + name);
}</pre>
            <div class="codesnippet-meta">MetaInfoExample.cs: Access via meta data
			<div class="codedownload"><a href="../CodeExamples/metainfo/Example-Code-metainfo-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">Dim</span> metaForPerson <span style="color:Blue;">As</span> IStoredClass = container.Ext().StoredClass(<span style="color:Blue;">GetType</span>(Person))
<span style="color:Blue;">Dim</span> metaNameField <span style="color:Blue;">As</span> IStoredField = metaForPerson.StoredField(<span style="color:#A31515;">"name"</span>, <span style="color:Blue;">Nothing</span>)

<span style="color:Blue;">Dim</span> persons <span style="color:Blue;">As</span> IList(Of Person) = container.Query(Of Person)()
<span style="color:Blue;">For</span>  <![CDATA[ ]]><span style="color:Blue;">Each</span> person <span style="color:Blue;">As</span> Person <span style="color:Blue;">In</span> persons
    <span style="color:Blue;">Dim</span> name <span style="color:Blue;">As</span>  <![CDATA[ ]]><span style="color:Blue;">String</span> = <span style="color:Blue;">DirectCast</span>(metaNameField.<span style="color:Blue;">Get</span>(person), <span style="color:Blue;">String</span>)
    Console.WriteLine(<span style="color:#A31515;">"Name is "</span> &amp; name)</pre>
            <div class="codesnippet-meta">MetaInfoExample.vb: Access via meta data
			<div class="codedownload"><a href="../CodeExamples/metainfo/Example-Code-metainfo-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <script src="../Resources/Code/jquery.min.js">
        </script>
        <script src="../Resources/Code/ZeroClipboard.js">
        </script>
        <script type="text/javascript">/* <![CDATA[ */
window.onload = function(){
	var pathToFlash = $('html').attr('MadCap:PathToHelpSystem') + 'Content/Resources/Code/ZeroClipboard.swf';
	ZeroClipboard.setMoviePath(pathToFlash);
			
	function bindToClipBord(element,content){
		var clip = new ZeroClipboard.Client();
		clip.setText(content);
		clip.glue(element);
	};
		
	if(location.protocol==='file:'){
		$('.copylink-marker').remove();
	} else{
			$('.copylink-marker').each(function(){
				var text = $(this).parent().parent().children('.prettyprint').text();
				$(this).hover(function(){
					bindToClipBord(this,text);
				},
				function(){});
			});	
	}		
};
                /* ]]> */</script>
        <script type="text/javascript" src="../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>