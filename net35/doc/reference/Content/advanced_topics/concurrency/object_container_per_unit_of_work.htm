<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Advanced Features|Concurrency and db4o" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>Object Container per Unit of Work</title>
        <link href="../../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="../../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../../index_CSH.html#advanced_topics/concurrency/object_container_per_unit_of_work.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../../advanced_topics.htm">Advanced Features</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../concurrency.htm">Concurrency and db4o</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Object Container per Unit of Work</span>
        </div>
        <script type="text/javascript">/*<![CDATA[*/
			document.write("<a href=\"" + location.href +"\">");
			document.write("Direct Link to this Article");
			document.write('</a>');/*]]>*/</script>
        <h1>Object Container per Unit of Work</h1>
        <p>One possibility is to use an object container per unit of work and avoid sharing it across threads. A typical example is to use an object container per request. You can create a new <a href="../session_containers.htm">session object container at any time</a>. </p>
        <p>Let's take a look at an example. This operation  starts a background task and carries on doing other things:</p>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Green;">// Schedule back-ground tasks</span>
Action&lt;IObjectContainer&gt; toRun = UpdateSomePeople;
<span style="color:Blue;">var</span> waitHandle = toRun.BeginInvoke(container, <span style="color:Blue;">null</span>, <span style="color:Blue;">null</span>);

<span style="color:Green;">// While doing other work</span>
ListAllPeople(container);</pre>
            <div class="codesnippet-meta">UnitsOfWork.cs: Schedule back-ground tasks
			<div class="codedownload"><a href="../../CodeExamples/concurrency/units/Example-concurrency-units-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Green;">' Schedule back-ground tasks</span>
<span style="color:Blue;">Dim</span> toRun <span style="color:Blue;">As</span> Action(Of IObjectContainer) = <span style="color:Blue;">AddressOf</span> UpdateSomePeople
<span style="color:Blue;">Dim</span> waitHandle = toRun.BeginInvoke(container, <span style="color:Blue;">Nothing</span>, <span style="color:Blue;">Nothing</span>)

<span style="color:Green;">' While doing other work</span>
ListAllPeople(container)</pre>
            <div class="codesnippet-meta">UnitsOfWork.vb: Schedule back-ground tasks
			<div class="codedownload"><a href="../../CodeExamples/concurrency/units/Example-concurrency-units-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <p>In this example we use an object container for the background work:</p>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">private</span> <![CDATA[ ]]><span style="color:Blue;">void</span> UpdateSomePeople(IObjectContainer rootContainer)
{
    <span style="color:Blue;">using</span> (IObjectContainer container = rootContainer.Ext().OpenSession())
    {
        <span style="color:Blue;">var</span> people = <span style="color:Blue;">from</span> Person p <span style="color:Blue;">in</span> container
                     <span style="color:Blue;">where</span> p.Name.Equals(<span style="color:#A31515;">"Joe"</span>)
                     <span style="color:Blue;">select</span> p;
        <span style="color:Blue;">foreach</span> (Person joe <span style="color:Blue;">in</span> people)
        {
            joe.Name = <span style="color:#A31515;">"New Joe"</span>;
            container.Store(joe);
        }
    }
}</pre>
            <div class="codesnippet-meta">UnitsOfWork.cs: An object container for the background task
			<div class="codedownload"><a href="../../CodeExamples/concurrency/units/Example-concurrency-units-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">Private</span> <![CDATA[ ]]><span style="color:Blue;">Sub</span> UpdateSomePeople(rootContainer <span style="color:Blue;">As</span> IObjectContainer)
    <span style="color:Blue;">Using</span> container <span style="color:Blue;">As</span> IObjectContainer = rootContainer.Ext().OpenSession()
        <span style="color:Blue;">Dim</span> people = <span style="color:Blue;">From</span> p <span style="color:Blue;">As</span> Person <span style="color:Blue;">In</span> container <span style="color:Blue;">Where</span> p.Name.<span style="color:Blue;">Equals</span>(<span style="color:#A31515;">"Joe"</span>) <span style="color:Blue;">Select</span> p
        <span style="color:Blue;">For</span> <![CDATA[ ]]><span style="color:Blue;">Each</span> joe <span style="color:Blue;">As</span> Person <span style="color:Blue;">In</span> people
            joe.Name = <span style="color:#A31515;">"New Joe"</span>
            container.Store(joe)
        <span style="color:Blue;">Next</span>
    <span style="color:Blue;">End</span> <![CDATA[ ]]><span style="color:Blue;">Using</span>
<span style="color:Blue;">End</span> <![CDATA[ ]]><span style="color:Blue;">Sub</span></pre>
            <div class="codesnippet-meta">UnitsOfWork.vb: An object container for the background task
			<div class="codedownload"><a href="../../CodeExamples/concurrency/units/Example-concurrency-units-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <p>And another background container for the list task.</p>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">private</span> <![CDATA[ ]]><span style="color:Blue;">void</span> ListAllPeople(IObjectContainer rootContainer)
{
    <span style="color:Blue;">using</span> (IObjectContainer container = rootContainer.Ext().OpenSession())
    {
        <span style="color:Blue;">foreach</span> (Person person <span style="color:Blue;">in</span> <![CDATA[ ]]><span style="color:Blue;">from</span> Person p <span style="color:Blue;">in</span> container <span style="color:Blue;">select</span> p)
        {
            Console.WriteLine(person.Name);
        }
    }
}</pre>
            <div class="codesnippet-meta">UnitsOfWork.cs: An object container for this unit of work
			<div class="codedownload"><a href="../../CodeExamples/concurrency/units/Example-concurrency-units-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">Private</span> <![CDATA[ ]]><span style="color:Blue;">Sub</span> ListAllPeople(rootContainer <span style="color:Blue;">As</span> IObjectContainer)
    <span style="color:Blue;">Using</span> container <span style="color:Blue;">As</span> IObjectContainer = rootContainer.Ext().OpenSession()
        <span style="color:Blue;">For</span> <![CDATA[ ]]><span style="color:Blue;">Each</span> person <span style="color:Blue;">As</span> Person <span style="color:Blue;">In</span> <![CDATA[ ]]><span style="color:Blue;">From</span> p <span style="color:Blue;">In</span> container <span style="color:Blue;">Select</span> p
            Console.WriteLine(person.Name)
        <span style="color:Blue;">Next</span>
    <span style="color:Blue;">End</span> <![CDATA[ ]]><span style="color:Blue;">Using</span>
<span style="color:Blue;">End</span> <![CDATA[ ]]><span style="color:Blue;">Sub</span></pre>
            <div class="codesnippet-meta">UnitsOfWork.vb: An object container for this unit of work
			<div class="codedownload"><a href="../../CodeExamples/concurrency/units/Example-concurrency-units-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h2>Be Aware of the Isolation Level</h2>
        <p>When using multiple object containers you need to be aware of the <a href="../../basics/acid_and_transactions/isolation.htm">transaction isolation</a>. db4o has read committed isolation properties. This isolation applies per object level. Object are loaded individually, which means that the different object-states may are from different committed states. </p>
        <p>Here's an example to demonstrate the isolation level issues. We have two bank accounts. One transaction lists the two bank accounts and sums up the total. </p>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">long</span> moneyInOurAccounts = 0;
<span style="color:Blue;">var</span> bankAccounts = <span style="color:Blue;">from</span> BankAccount b <span style="color:Blue;">in</span> container <span style="color:Blue;">select</span> b;
<span style="color:Blue;">foreach</span> (BankAccount account <span style="color:Blue;">in</span> bankAccounts)
{
    Console.WriteLine(<span style="color:#A31515;">"This account has "</span> + account.Money);
    moneyInOurAccounts += account.Money;
    MoveMoneyTransactionFinishes();
}
<span style="color:Green;">// We get the wrong answer here</span>
Console.WriteLine(<span style="color:#A31515;">"The money total is {0}. Expected is {1}"</span>,
                  moneyInOurAccounts, InitialMoneyOnOneAccount*bankAccounts.Count());</pre>
            <div class="codesnippet-meta">InconsistentStateRead.cs: We list the bank accounts and sum up the money
			<div class="codedownload"><a href="../../CodeExamples/transactions/Example-Code-transactions-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">Dim</span> moneyInOurAccounts <span style="color:Blue;">As</span> <![CDATA[ ]]><span style="color:Blue;">Long</span> = 0
<span style="color:Blue;">Dim</span> bankAccounts = <span style="color:Blue;">From</span> b <span style="color:Blue;">As</span> BankAccount <span style="color:Blue;">In</span> container <span style="color:Blue;">Select</span> b
<span style="color:Blue;">For</span> <![CDATA[ ]]><span style="color:Blue;">Each</span> account <span style="color:Blue;">As</span> BankAccount <span style="color:Blue;">In</span> bankAccounts
    Console.WriteLine(<span style="color:#A31515;">"This account has "</span> &amp; account.Money)
    moneyInOurAccounts += account.Money
    MoveMoneyTransactionFinishes()
<span style="color:Blue;">Next</span>
<span style="color:Green;">' We get the wrong answer here</span></pre>
            <div class="codesnippet-meta">InconsistentStateRead.vb: We list the bank accounts and sum up the money
			<div class="codedownload"><a href="../../CodeExamples/transactions/Example-Code-transactions-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <p>During that operation another transaction finishes a money transfer from one account to another and commits.</p>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">var</span> bankAccounts = <span style="color:Blue;">from</span> BankAccount b <span style="color:Blue;">in</span> container <span style="color:Blue;">select</span> b;
<span style="color:Blue;">var</span> debitAccount = bankAccounts.ElementAt(0);
<span style="color:Blue;">var</span> creditAccount = bankAccounts.ElementAt(1);

<span style="color:Blue;">int</span> moneyToTransfer = 200;
creditAccount.WithDraw(moneyToTransfer);
debitAccount.Deposit(moneyToTransfer);

container.Store(debitAccount);
container.Store(creditAccount);
container.Commit();</pre>
            <div class="codesnippet-meta">InconsistentStateRead.cs: Meanwhile we transfer money.
			<div class="codedownload"><a href="../../CodeExamples/transactions/Example-Code-transactions-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">Dim</span> bankAccounts = <span style="color:Blue;">From</span> b <span style="color:Blue;">As</span> BankAccount <span style="color:Blue;">In</span> container <span style="color:Blue;">Select</span> b
<span style="color:Blue;">Dim</span> debitAccount = bankAccounts.ElementAt(0)
<span style="color:Blue;">Dim</span> creditAccount = bankAccounts.ElementAt(1)

<span style="color:Blue;">Dim</span> moneyToTransfer <span style="color:Blue;">As</span> <![CDATA[ ]]><span style="color:Blue;">Integer</span> = 200
creditAccount.WithDraw(moneyToTransfer)
debitAccount.Deposit(moneyToTransfer)

container.Store(debitAccount)
container.Store(creditAccount)</pre>
            <div class="codesnippet-meta">InconsistentStateRead.vb: Meanwhile we transfer money.
			<div class="codedownload"><a href="../../CodeExamples/transactions/Example-Code-transactions-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <p> Now the other transaction sees one bank account previous transfer, the other account is in the last committed state. Therefore it sees an inconsistent view across these two objects. </p>
        <p>&#160;</p>
        <script src="../../Resources/Code/jquery.min.js">
        </script>
        <script src="../../Resources/Code/ZeroClipboard.js">
        </script>
        <script type="text/javascript">/* <![CDATA[ */
window.onload = function(){
	var pathToFlash = $('html').attr('MadCap:PathToHelpSystem') + 'Content/Resources/Code/ZeroClipboard.swf';
	ZeroClipboard.setMoviePath(pathToFlash);
			
	function bindToClipBord(element,content){
		var clip = new ZeroClipboard.Client();
		clip.setText(content);
		clip.glue(element);
	};
		
	if(location.protocol==='file:'){
		$('.copylink-marker').remove();
	} else{
			$('.copylink-marker').each(function(){
				var text = $(this).parent().parent().children('.prettyprint').text();
				$(this).hover(function(){
					bindToClipBord(this,text);
				},
				function(){});
			});	
	}		
};
                /* ]]> */</script>
        <script type="text/javascript" src="../../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>