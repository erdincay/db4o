<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Advanced Features|Concurrency and db4o|Sharing an Object Container Across Threads|Improving the Locking" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>Read Write&#160;Lock Example</title>
        <link href="../../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="../../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../../index_CSH.html#advanced_topics/concurrency/read_write_lock_example.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../../advanced_topics.htm">Advanced Features</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../concurrency.htm">Concurrency and db4o</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="share_object_container_threads.htm">Sharing an Object Container Across Threads</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Read Write Lock Example</span>
        </div>
        <script type="text/javascript">/*<![CDATA[*/
			document.write("<a href=\"" + location.href +"\">");
			document.write("Direct Link to this Article");
			document.write('</a>');/*]]>*/</script>
        <h1>Read Write&#160;Lock Example</h1>
        <p>This example is the same as used in the <a href="share_object_container_threads.htm">shared container topic</a>. Except that it is using read and write locks.</p>
        <p>We replace the lock object with a read write lock:</p>
        <p>And then on reading operations you use the read lock:</p>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">private</span> <![CDATA[ ]]><span style="color:Blue;">void</span> ListAllPeople(IObjectContainer container)
{
    dataLock.EnterReadLock();
    <span style="color:Blue;">try</span>
    {
        <span style="color:Blue;">foreach</span> (Person person <span style="color:Blue;">in</span> <![CDATA[ ]]><span style="color:Blue;">from</span> Person p <span style="color:Blue;">in</span> container <span style="color:Blue;">select</span> p)
        {
            Console.WriteLine(person.Name);
        }
    }
    <span style="color:Blue;">finally</span>
    {
        dataLock.ExitReadLock();
    }
}</pre>
            <div class="codesnippet-meta">ReadWriteLockingOperations.cs: Grab the read-lock to show the data
			<div class="codedownload"><a href="../../CodeExamples/concurrency/locking/Example-concurrency-locking-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">Private</span> <![CDATA[ ]]><span style="color:Blue;">Sub</span> ListAllPeople(container <span style="color:Blue;">As</span> IObjectContainer)
    dataLock.EnterReadLock()
    <span style="color:Blue;">Try</span>
        <span style="color:Blue;">For</span> <![CDATA[ ]]><span style="color:Blue;">Each</span> person <span style="color:Blue;">In</span> (<span style="color:Blue;">From</span> p <span style="color:Blue;">As</span> Person <span style="color:Blue;">In</span> container <span style="color:Blue;">Select</span> p)
            Console.WriteLine(person.Name)
        <span style="color:Blue;">Next</span>
    <span style="color:Blue;">Finally</span>
        dataLock.ExitReadLock()
    <span style="color:Blue;">End</span> <![CDATA[ ]]><span style="color:Blue;">Try</span>
<span style="color:Blue;">End</span> <![CDATA[ ]]><span style="color:Blue;">Sub</span></pre>
            <div class="codesnippet-meta">ReadWriteLockingOperations.vb: Grab the read-lock to show the data
			<div class="codedownload"><a href="../../CodeExamples/concurrency/locking/Example-concurrency-locking-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <p>On insert and update operations you grab the write lock. Note that you need the write lock every time you change some data.</p>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">private</span> <![CDATA[ ]]><span style="color:Blue;">void</span> UpdateSomePeople(IObjectContainer container)
{
    dataLock.EnterWriteLock();
    <span style="color:Blue;">try</span>
    {
        <span style="color:Blue;">var</span> people = <span style="color:Blue;">from</span> Person p <span style="color:Blue;">in</span> container
                     <span style="color:Blue;">where</span> p.Name.Equals(<span style="color:#A31515;">"Joe"</span>)
                     <span style="color:Blue;">select</span> p;
        <span style="color:Blue;">foreach</span> (Person joe <span style="color:Blue;">in</span> people)
        {
            joe.Name = <span style="color:#A31515;">"New Joe"</span>;
            container.Store(joe);
        }
    }
    <span style="color:Blue;">finally</span>
    {
        dataLock.ExitWriteLock();
    }
}</pre>
            <div class="codesnippet-meta">ReadWriteLockingOperations.cs: Grab the write-lock to change the data
			<div class="codedownload"><a href="../../CodeExamples/concurrency/locking/Example-concurrency-locking-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">Private</span> <![CDATA[ ]]><span style="color:Blue;">Sub</span> UpdateSomePeople(container <span style="color:Blue;">As</span> IObjectContainer)
    dataLock.EnterWriteLock()
    <span style="color:Blue;">Try</span>
        <span style="color:Blue;">Dim</span> people = <span style="color:Blue;">From</span> p <span style="color:Blue;">As</span> Person <span style="color:Blue;">In</span> container <span style="color:Blue;">Where</span> p.Name.<span style="color:Blue;">Equals</span>(<span style="color:#A31515;">"Joe"</span>) <span style="color:Blue;">Select</span> p
        <span style="color:Blue;">For</span> <![CDATA[ ]]><span style="color:Blue;">Each</span> joe <span style="color:Blue;">As</span> Person <span style="color:Blue;">In</span> people
            joe.Name = <span style="color:#A31515;">"New Joe"</span>
            container.Store(joe)
        <span style="color:Blue;">Next</span>
    <span style="color:Blue;">Finally</span>
        dataLock.ExitWriteLock()
    <span style="color:Blue;">End</span> <![CDATA[ ]]><span style="color:Blue;">Try</span>
<span style="color:Blue;">End</span> <![CDATA[ ]]><span style="color:Blue;">Sub</span></pre>
            <div class="codesnippet-meta">ReadWriteLockingOperations.vb: Grab the write-lock to change the data
			<div class="codedownload"><a href="../../CodeExamples/concurrency/locking/Example-concurrency-locking-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h2><a name="Read"></a>Read Write Lock Transactions</h2>
        <p>You can use read write locks also in a transaction abstraction. This example is an extension of <a href="share_object_container_threads.htm#TransactionModel">transaction abstraction example</a> but with read write locks.</p>
        <p>First we introduce the read write lock.</p>
        <p>Then we implement read and write transaction methods:</p>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">public</span> T InWriteTransaction&lt;T&gt;(TransactionFunction&lt;T&gt; transactionClosure)
{
    transactionLock.EnterWriteLock();
    <span style="color:Blue;">try</span>
    {
        <span style="color:Blue;">return</span> transactionClosure(database);
    }
    <span style="color:Blue;">catch</span> (Exception)
    {
        database.Rollback();
        <span style="color:Blue;">throw</span>;
    }
    <span style="color:Blue;">finally</span>
    {
        database.Commit();
        transactionLock.ExitWriteLock();
    }
}</pre>
            <div class="codesnippet-meta">DatabaseSupportWithReadWriteLock.cs: The read transaction method
			<div class="codedownload"><a href="../../CodeExamples/concurrency/transactions/Example-concurrency-transactions-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">Public</span> <![CDATA[ ]]><span style="color:Blue;">Function</span> InWriteTransaction(Of T)(transactionClosure <span style="color:Blue;">As</span> TransactionFunction(Of T)) <span style="color:Blue;">As</span> T
    transactionLock.EnterWriteLock()
    <span style="color:Blue;">Try</span>
        <span style="color:Blue;">Return</span> transactionClosure(database)
    <span style="color:Blue;">Catch</span> generatedExceptionName <span style="color:Blue;">As</span> Exception
        database.Rollback()
        <span style="color:Blue;">Throw</span>
    <span style="color:Blue;">Finally</span>
        database.Commit()
        transactionLock.ExitWriteLock()
    <span style="color:Blue;">End</span> <![CDATA[ ]]><span style="color:Blue;">Try</span>
<span style="color:Blue;">End</span> <![CDATA[ ]]><span style="color:Blue;">Function</span></pre>
            <div class="codesnippet-meta">DatabaseSupportWithReadWriteLock.vb: The read transaction method
			<div class="codedownload"><a href="../../CodeExamples/concurrency/transactions/Example-concurrency-transactions-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">public</span> T InReadTransaction&lt;T&gt;(TransactionFunction&lt;T&gt; transactionClosure)
{
    transactionLock.EnterReadLock();
    <span style="color:Blue;">try</span>
    {
        <span style="color:Blue;">return</span> transactionClosure(database);
    }
    <span style="color:Blue;">catch</span> (Exception)
    {
        database.Rollback();
        <span style="color:Blue;">throw</span>;
    }
    <span style="color:Blue;">finally</span>
    {
        database.Commit();
        transactionLock.ExitReadLock();
    }
}</pre>
            <div class="codesnippet-meta">DatabaseSupportWithReadWriteLock.cs: The write transaction method
			<div class="codedownload"><a href="../../CodeExamples/concurrency/transactions/Example-concurrency-transactions-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">Public</span> <![CDATA[ ]]><span style="color:Blue;">Function</span> InReadTransaction(Of T)(transactionClosure <span style="color:Blue;">As</span> TransactionFunction(Of T)) <span style="color:Blue;">As</span> T
    transactionLock.EnterReadLock()
    <span style="color:Blue;">Try</span>
        <span style="color:Blue;">Return</span> transactionClosure(database)
    <span style="color:Blue;">Catch</span> generatedExceptionName <span style="color:Blue;">As</span> Exception
        database.Rollback()
        <span style="color:Blue;">Throw</span>
    <span style="color:Blue;">Finally</span>
        database.Commit()
        transactionLock.ExitReadLock()
    <span style="color:Blue;">End</span> <![CDATA[ ]]><span style="color:Blue;">Try</span>
<span style="color:Blue;">End</span> <![CDATA[ ]]><span style="color:Blue;">Function</span></pre>
            <div class="codesnippet-meta">DatabaseSupportWithReadWriteLock.vb: The write transaction method
			<div class="codedownload"><a href="../../CodeExamples/concurrency/transactions/Example-concurrency-transactions-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <p>After that we can use these operations in our code:</p>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">private</span> <![CDATA[ ]]><span style="color:Blue;">void</span> ListAllPeople(DatabaseSupportWithReadWriteLock dbSupport)
{
    dbSupport.InReadTransaction(
        container =&gt;
            {
                <span style="color:Blue;">var</span> result = <span style="color:Blue;">from</span> Person p <span style="color:Blue;">in</span> container <span style="color:Blue;">select</span> p;
                <span style="color:Blue;">foreach</span> (Person person <span style="color:Blue;">in</span> result)
                {
                    Console.WriteLine(person.Name);
                }
            });
}</pre>
            <div class="codesnippet-meta">ReadWriteTransactionOperations.cs: Use a read transaction for reading objects
			<div class="codedownload"><a href="../../CodeExamples/concurrency/transactions/Example-concurrency-transactions-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">Private</span> <![CDATA[ ]]><span style="color:Blue;">Sub</span> ListAllPeople(dbSupport <span style="color:Blue;">As</span> DatabaseSupportWithReadWriteLock)
    dbSupport.InReadTransaction(
        <span style="color:Blue;">Function</span>(container)
            <span style="color:Blue;">Dim</span> result = <span style="color:Blue;">From</span> p <span style="color:Blue;">As</span> Person <span style="color:Blue;">In</span> container <span style="color:Blue;">Select</span> p
            <span style="color:Blue;">For</span> <![CDATA[ ]]><span style="color:Blue;">Each</span> person <span style="color:Blue;">As</span> Person <span style="color:Blue;">In</span> result
                Console.WriteLine(person.Name)
            <span style="color:Blue;">Next</span>

        <span style="color:Blue;">End</span> <![CDATA[ ]]><span style="color:Blue;">Function</span>)
<span style="color:Blue;">End</span> <![CDATA[ ]]><span style="color:Blue;">Sub</span></pre>
            <div class="codesnippet-meta">ReadWriteTransactionOperations.vb: Use a read transaction for reading objects
			<div class="codedownload"><a href="../../CodeExamples/concurrency/transactions/Example-concurrency-transactions-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">private</span> <![CDATA[ ]]><span style="color:Blue;">void</span> UpdateAllJoes(DatabaseSupportWithReadWriteLock dbSupport)
{
    dbSupport.InWriteTransaction(
        container =&gt;
            {
                <span style="color:Blue;">var</span> allJoes = <span style="color:Blue;">from</span> Person p <span style="color:Blue;">in</span> container
                              <span style="color:Blue;">where</span> p.Name == <span style="color:#A31515;">"Joe"</span>
                              <span style="color:Blue;">select</span> p;
                <span style="color:Blue;">foreach</span> (Person joe <span style="color:Blue;">in</span> allJoes)
                {
                    joe.Name = <span style="color:#A31515;">"New Joe"</span>;
                    container.Store(joe);
                }
            });
}</pre>
            <div class="codesnippet-meta">ReadWriteTransactionOperations.cs: Use a write transaction to update objects
			<div class="codedownload"><a href="../../CodeExamples/concurrency/transactions/Example-concurrency-transactions-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">Private</span> <![CDATA[ ]]><span style="color:Blue;">Sub</span> UpdateAllJoes(dbSupport <span style="color:Blue;">As</span> DatabaseSupportWithReadWriteLock)
    dbSupport.InWriteTransaction(
                 <span style="color:Blue;">Function</span>(container)
                     <span style="color:Blue;">Dim</span> allJoes = <span style="color:Blue;">From</span> p <span style="color:Blue;">As</span> Person <span style="color:Blue;">In</span> container _
                                 <span style="color:Blue;">Where</span> p.Name = <span style="color:#A31515;">"Joe"</span> _
                                 <span style="color:Blue;">Select</span> p
                     <span style="color:Blue;">For</span> <![CDATA[ ]]><span style="color:Blue;">Each</span> joe <span style="color:Blue;">As</span> Person <span style="color:Blue;">In</span> allJoes
                         joe.Name = <span style="color:#A31515;">"New Joe"</span>
                         container.Store(joe)
                     <span style="color:Blue;">Next</span>
                 <span style="color:Blue;">End</span> <![CDATA[ ]]><span style="color:Blue;">Function</span>)
<span style="color:Blue;">End</span> <![CDATA[ ]]><span style="color:Blue;">Sub</span></pre>
            <div class="codesnippet-meta">ReadWriteTransactionOperations.vb: Use a write transaction to update objects
			<div class="codedownload"><a href="../../CodeExamples/concurrency/transactions/Example-concurrency-transactions-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <script src="../../Resources/Code/jquery.min.js">
        </script>
        <script src="../../Resources/Code/ZeroClipboard.js">
        </script>
        <script type="text/javascript">/* <![CDATA[ */
window.onload = function(){
	var pathToFlash = $('html').attr('MadCap:PathToHelpSystem') + 'Content/Resources/Code/ZeroClipboard.swf';
	ZeroClipboard.setMoviePath(pathToFlash);
			
	function bindToClipBord(element,content){
		var clip = new ZeroClipboard.Client();
		clip.setText(content);
		clip.glue(element);
	};
		
	if(location.protocol==='file:'){
		$('.copylink-marker').remove();
	} else{
			$('.copylink-marker').each(function(){
				var text = $(this).parent().parent().children('.prettyprint').text();
				$(this).hover(function(){
					bindToClipBord(this,text);
				},
				function(){});
			});	
	}		
};
                /* ]]> */</script>
        <script type="text/javascript" src="../../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>