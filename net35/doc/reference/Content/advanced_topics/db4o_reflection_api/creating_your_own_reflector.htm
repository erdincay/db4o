<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Advanced Features|db4o Reflection API" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>Creating your own reflector</title>
        <link href="../../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="../../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../../index_CSH.html#advanced_topics/db4o_reflection_api/creating_your_own_reflector.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../../advanced_topics.htm">Advanced Features</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../db4o_reflection_api.htm">db4o Reflection API</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Creating your own reflector</span>
        </div>
        <script type="text/javascript">/*<![CDATA[*/
			document.write("<a href=\"" + location.href +"\">");
			document.write("Direct Link to this Article");
			document.write('</a>');/*]]>*/</script>
        <h1>Creating your own reflector</h1>
        <p>By default db4o uses the <span MadCap:conditions="Primary..NET">NetReflector</span>. As alternative you can create your own reflector and use it with db4o. In order to do so you need to implement the <span MadCap:conditions="Primary..NET">I</span>Reflector interface. And then pass an instance of your implementation to db4o.</p>
        <p>Here's an example of a  logging reflector. Its only difference from standard reflector is that information about loaded classes is outputted to console:</p>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">internal</span> <![CDATA[ ]]><span style="color:Blue;">class</span> LoggerReflector : IReflector
{
    <span style="color:Blue;">private</span> <![CDATA[ ]]><span style="color:Blue;">readonly</span> IReflector readReflector;

    <span style="color:Blue;">public</span> LoggerReflector()
    {
        <span style="color:Blue;">this</span>.readReflector = <span style="color:Blue;">new</span> NetReflector();
    }

    <span style="color:Blue;">public</span> LoggerReflector(IReflector readReflector)
    {
        <span style="color:Blue;">this</span>.readReflector = readReflector;
    }

    <span style="color:Blue;">public</span> <![CDATA[ ]]><span style="color:Blue;">void</span> Configuration(IReflectorConfiguration reflectorConfiguration)
    {
        readReflector.Configuration(reflectorConfiguration);
    }

    <span style="color:Blue;">public</span> IReflectArray Array()
    {
        <span style="color:Blue;">return</span> readReflector.Array();
    }

    <span style="color:Blue;">public</span> IReflectClass ForClass(Type type)
    {
        Console.WriteLine(<span style="color:#A31515;">"Reflector.forClass({0})"</span>, type);
        <span style="color:Blue;">return</span> readReflector.ForClass(type);
    }

    <span style="color:Blue;">public</span> IReflectClass ForName(<span style="color:Blue;">string</span> className)
    {
        Console.WriteLine(<span style="color:#A31515;">"Reflector.forName({0})"</span>, className);
        <span style="color:Blue;">return</span> readReflector.ForName(className);
    }

    <span style="color:Blue;">public</span> IReflectClass ForObject(<span style="color:Blue;">object</span> o)
    {
        Console.WriteLine(<span style="color:#A31515;">"Reflector.forObject("</span> + o + <span style="color:#A31515;">")"</span>);
        <span style="color:Blue;">return</span> readReflector.ForObject(o);
    }

    <span style="color:Blue;">public</span> <![CDATA[ ]]><span style="color:Blue;">bool</span> IsCollection(IReflectClass reflectClass)
    {
        <span style="color:Blue;">return</span> readReflector.IsCollection(reflectClass);
    }

    <span style="color:Blue;">public</span> <![CDATA[ ]]><span style="color:Blue;">void</span> SetParent(IReflector reflector)
    {
        readReflector.SetParent(reflector);
    }

    <span style="color:Blue;">public</span> <![CDATA[ ]]><span style="color:Blue;">object</span> DeepClone(<span style="color:Blue;">object</span> o)
    {
        <span style="color:Blue;">return</span> <![CDATA[ ]]><span style="color:Blue;">new</span> LoggerReflector((IReflector) readReflector.DeepClone(o));
    }
}</pre>
            <div class="codesnippet-meta">ReflectorExamples.cs: Logging reflector
			<div class="codedownload"><a href="../../CodeExamples/reflection/Example-Code-reflection-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">Friend</span> <![CDATA[ ]]><span style="color:Blue;">Class</span> LoggerReflector
    <span style="color:Blue;">Implements</span> IReflector
    <span style="color:Blue;">Private</span> <![CDATA[ ]]><span style="color:Blue;">ReadOnly</span> readReflector <span style="color:Blue;">As</span> IReflector

    <span style="color:Blue;">Public</span> <![CDATA[ ]]><span style="color:Blue;">Sub</span> <![CDATA[ ]]><span style="color:Blue;">New</span>()
        <span style="color:Blue;">Me</span>.readReflector = <span style="color:Blue;">New</span> NetReflector()
    <span style="color:Blue;">End</span> <![CDATA[ ]]><span style="color:Blue;">Sub</span>

    <span style="color:Blue;">Public</span> <![CDATA[ ]]><span style="color:Blue;">Sub</span> <![CDATA[ ]]><span style="color:Blue;">New</span>(<span style="color:Blue;">ByVal</span> readReflector <span style="color:Blue;">As</span> IReflector) 
        <span style="color:Blue;">Me</span>.readReflector = readReflector
    <span style="color:Blue;">End</span> <![CDATA[ ]]><span style="color:Blue;">Sub</span>

    <span style="color:Blue;">Public</span> <![CDATA[ ]]><span style="color:Blue;">Sub</span> Configuration(<span style="color:Blue;">ByVal</span> reflectorConfiguration <span style="color:Blue;">As</span> IReflectorConfiguration) _
        <span style="color:Blue;">Implements</span> IReflector.Configuration
        readReflector.Configuration(reflectorConfiguration)
    <span style="color:Blue;">End</span> <![CDATA[ ]]><span style="color:Blue;">Sub</span>

    <span style="color:Blue;">Public</span> <![CDATA[ ]]><span style="color:Blue;">Function</span> Array() <span style="color:Blue;">As</span> IReflectArray _
        <span style="color:Blue;">Implements</span> IReflector.Array
        <span style="color:Blue;">Return</span> readReflector.Array()
    <span style="color:Blue;">End</span> <![CDATA[ ]]><span style="color:Blue;">Function</span>

    <span style="color:Blue;">Public</span> <![CDATA[ ]]><span style="color:Blue;">Function</span> ForClass(<span style="color:Blue;">ByVal</span> type <span style="color:Blue;">As</span> Type) <span style="color:Blue;">As</span> IReflectClass _
        <span style="color:Blue;">Implements</span> IReflector.ForClass
        Console.WriteLine(<span style="color:#A31515;">"Reflector.forClass({0})"</span>, type)
        <span style="color:Blue;">Return</span> readReflector.ForClass(type)
    <span style="color:Blue;">End</span> <![CDATA[ ]]><span style="color:Blue;">Function</span>

    <span style="color:Blue;">Public</span> <![CDATA[ ]]><span style="color:Blue;">Function</span> ForName(<span style="color:Blue;">ByVal</span> className <span style="color:Blue;">As</span> <![CDATA[ ]]><span style="color:Blue;">String</span>) <span style="color:Blue;">As</span> IReflectClass _
        <span style="color:Blue;">Implements</span> IReflector.ForName
        Console.WriteLine(<span style="color:#A31515;">"Reflector.forName({0})"</span>, className)
        <span style="color:Blue;">Return</span> readReflector.ForName(className)
    <span style="color:Blue;">End</span> <![CDATA[ ]]><span style="color:Blue;">Function</span>

    <span style="color:Blue;">Public</span> <![CDATA[ ]]><span style="color:Blue;">Function</span> ForObject(<span style="color:Blue;">ByVal</span> o <span style="color:Blue;">As</span> <![CDATA[ ]]><span style="color:Blue;">Object</span>) <span style="color:Blue;">As</span> IReflectClass _
        <span style="color:Blue;">Implements</span> IReflector.ForObject
        Console.WriteLine(<span style="color:#A31515;">"Reflector.forObject("</span> &amp; Convert.ToString(o) &amp; <span style="color:#A31515;">")"</span>)
        <span style="color:Blue;">Return</span> readReflector.ForObject(o)
    <span style="color:Blue;">End</span> <![CDATA[ ]]><span style="color:Blue;">Function</span>

    <span style="color:Blue;">Public</span> <![CDATA[ ]]><span style="color:Blue;">Function</span> IsCollection(<span style="color:Blue;">ByVal</span> reflectClass <span style="color:Blue;">As</span> IReflectClass) <span style="color:Blue;">As</span> <![CDATA[ ]]><span style="color:Blue;">Boolean</span> _
        <span style="color:Blue;">Implements</span> IReflector.IsCollection
        <span style="color:Blue;">Return</span> readReflector.IsCollection(reflectClass)
    <span style="color:Blue;">End</span> <![CDATA[ ]]><span style="color:Blue;">Function</span>

    <span style="color:Blue;">Public</span> <![CDATA[ ]]><span style="color:Blue;">Sub</span> SetParent(<span style="color:Blue;">ByVal</span> reflector <span style="color:Blue;">As</span> IReflector) _
        <span style="color:Blue;">Implements</span> IReflector.SetParent
        readReflector.SetParent(reflector)
    <span style="color:Blue;">End</span> <![CDATA[ ]]><span style="color:Blue;">Sub</span>

    <span style="color:Blue;">Public</span> <![CDATA[ ]]><span style="color:Blue;">Function</span> DeepClone(<span style="color:Blue;">ByVal</span> o <span style="color:Blue;">As</span> <![CDATA[ ]]><span style="color:Blue;">Object</span>) <span style="color:Blue;">As</span> <![CDATA[ ]]><span style="color:Blue;">Object</span> _
        <span style="color:Blue;">Implements</span> IReflector.DeepClone
        <span style="color:Blue;">Return</span> <![CDATA[ ]]><span style="color:Blue;">New</span> LoggerReflector(<span style="color:Blue;">DirectCast</span>(readReflector.DeepClone(o), IReflector))
    <span style="color:Blue;">End</span> <![CDATA[ ]]><span style="color:Blue;">Function</span>
<span style="color:Blue;">End</span> <![CDATA[ ]]><span style="color:Blue;">Class</span></pre>
            <div class="codesnippet-meta">ReflectorExamples.vb: Logging reflector
			<div class="codedownload"><a href="../../CodeExamples/reflection/Example-Code-reflection-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <script src="../../Resources/Code/jquery.min.js">
        </script>
        <script src="../../Resources/Code/ZeroClipboard.js">
        </script>
        <script type="text/javascript">/* <![CDATA[ */
window.onload = function(){
	var pathToFlash = $('html').attr('MadCap:PathToHelpSystem') + 'Content/Resources/Code/ZeroClipboard.swf';
	ZeroClipboard.setMoviePath(pathToFlash);
			
	function bindToClipBord(element,content){
		var clip = new ZeroClipboard.Client();
		clip.setText(content);
		clip.glue(element);
	};
		
	if(location.protocol==='file:'){
		$('.copylink-marker').remove();
	} else{
			$('.copylink-marker').each(function(){
				var text = $(this).parent().parent().children('.prettyprint').text();
				$(this).hover(function(){
					bindToClipBord(this,text);
				},
				function(){});
			});	
	}		
};
                /* ]]> */</script>
        <script type="text/javascript" src="../../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>