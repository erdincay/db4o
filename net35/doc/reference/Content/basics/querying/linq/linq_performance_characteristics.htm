<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Basics Operations &amp; Concepts|Querying|LINQ" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>LINQ Performance Characteristics </title>
        <link href="../../../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="../../../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../../../index_CSH.html#basics/querying/linq/linq_performance_characteristics.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../../../basics.htm">Basics Operations &amp; Concepts</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../../querying.htm">Querying</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../linq.htm">LINQ</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Good Performance Characteristics</span>
        </div>
        <script type="text/javascript">/*<![CDATA[*/
			document.write("<a href=\"" + location.href +"\">");
			document.write("Direct Link to this Article");
			document.write('</a>');/*]]>*/</script>
        <h1><a name="kanchor10"></a>LINQ Performance Characteristics </h1>
        <p>This overview shows which query operations perform well or badly on large datasets. It should give you an idea which operations can be used on large datasets and which operations can only be applied to small datasets.</p>
        <p>LINQ queries are translated to SODA and therefore they share the same basic    <![CDATA[ ]]><a href="../soda/soda_performance_characteristics.htm">performance characteristics</a>.</p>
        <p>When you run a LINQ query the first time db4o has to initialize the LINQ query subsystem and do various analyses. Therefore the first run of a query can be quite slow. However subsequent runs are fast.</p>
        <h2><a name="GoodPerf"></a>Good Performance Characteristics</h2>
        <p>For a good query performance fields which are used in a query have to be <a href="../../indexing.htm">indexed</a>. Otherwise db4o needs to scan through all objects. With an index these operations should scale logarithmically with the amount of data. The following queries all assume that the fields are indexed.</p>
        <h3>Equals Operation on Indexed Field</h3>
        <p>Simple equals operations on indexed fields’ perform very well.</p>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">var</span> result = <span style="color:Blue;">from</span> Item i <span style="color:Blue;">in</span> container
             <span style="color:Blue;">where</span> i.IndexedString == criteria
             <span style="color:Blue;">select</span> i;</pre>
            <div class="codesnippet-meta">GoodPerformance.cs: Equals on indexed field
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/linq/Example-query-linq-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">Dim</span> result = <span style="color:Blue;">From</span> i <span style="color:Blue;">As</span> Item <span style="color:Blue;">In</span> container _
  <span style="color:Blue;">Where</span> i.IndexedString = criteria _
  <span style="color:Blue;">Select</span> i</pre>
            <div class="codesnippet-meta">GoodPerformance.vb: Equals on indexed field
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/linq/Example-query-linq-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <p>Not equals operations also do perform well. However a 'not equals' operation tends to return a large result which will slow down the query.</p>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">var</span> result = <span style="color:Blue;">from</span> Item i <span style="color:Blue;">in</span> container
             <span style="color:Blue;">where</span> i.IndexedString != criteria
             <span style="color:Blue;">select</span> i;</pre>
            <div class="codesnippet-meta">GoodPerformance.cs: Not equals
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/linq/Example-query-linq-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">Dim</span> result = <span style="color:Blue;">From</span> i <span style="color:Blue;">As</span> Item <span style="color:Blue;">In</span> container _
        <span style="color:Blue;">Where</span> i.IndexedString &lt;&gt; criteria _
        <span style="color:Blue;">Select</span> i</pre>
            <div class="codesnippet-meta">GoodPerformance.vb: Not equals
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/linq/Example-query-linq-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h3>Navigation Queries on Index Field</h3>
        <p>Queries which navigate along references are executed also efficiently, as long every field and reference is indexed.</p>
        <p>However there's a catch to this: The reference field type has to be a concrete type. If a field type is an interface or of type object, <a href="#SlowNavigationQueries">then the query runs slow</a>.</p>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Green;">// Note that the type of the 'indexedReference' has to the specific type</span>
<span style="color:Green;">// which holds the 'indexedString'</span>
<span style="color:Blue;">var</span> result = <span style="color:Blue;">from</span> ItemHolder h <span style="color:Blue;">in</span> container
             <span style="color:Blue;">where</span> h.IndexedReference.IndexedString == criteria
             <span style="color:Blue;">select</span> h;</pre>
            <div class="codesnippet-meta">GoodPerformance.cs: Equals across indexed fields
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/linq/Example-query-linq-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Green;">' Note that the type of the 'indexedReference' has to the specific type</span>
<span style="color:Green;">' which holds the 'indexedString'</span>
<span style="color:Blue;">Dim</span> result = <span style="color:Blue;">From</span> h <span style="color:Blue;">As</span> ItemHolder <span style="color:Blue;">In</span> container _
        <span style="color:Blue;">Where</span> h.IndexedReference.IndexedString = criteria _
        <span style="color:Blue;">Select</span> h</pre>
            <div class="codesnippet-meta">GoodPerformance.vb: Equals across indexed fields
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/linq/Example-query-linq-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h3>Reference-Queries</h3>
        <p>Like regular equals operation, comparisons against references also have a good performance.</p>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Green;">// Note that the type of the 'indexedReference' has to the specific type</span>
<span style="color:Green;">// which holds the 'indexedString'</span>
<span style="color:Blue;">var</span> result = <span style="color:Blue;">from</span> ItemHolder h <span style="color:Blue;">in</span> container
             <span style="color:Blue;">where</span> h.IndexedReference == item
             <span style="color:Blue;">select</span> h;</pre>
            <div class="codesnippet-meta">GoodPerformance.cs: Query by reference
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/linq/Example-query-linq-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Green;">' Note that the type of the 'indexedReference' has to the specific type</span>
<span style="color:Green;">' which holds the 'indexedString'</span>
<span style="color:Blue;">Dim</span> result = <span style="color:Blue;">From</span> h <span style="color:Blue;">As</span> ItemHolder <span style="color:Blue;">In</span> container _
        <span style="color:Blue;">Where</span> h.IndexedReference <span style="color:Blue;">Is</span> item _
        <span style="color:Blue;">Select</span> h</pre>
            <div class="codesnippet-meta">GoodPerformance.vb: Query by reference
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/linq/Example-query-linq-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h3>Comparison and Range Queries</h3>
        <p>Comparison and range queries  also perform well.</p>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">var</span> result = <span style="color:Blue;">from</span> Item i <span style="color:Blue;">in</span> container
             <span style="color:Blue;">where</span> i.IndexNumber &gt; criteria
             <span style="color:Blue;">select</span> i;</pre>
            <div class="codesnippet-meta">GoodPerformance.cs: Bigger than
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/linq/Example-query-linq-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">Dim</span> result = <span style="color:Blue;">From</span> i <span style="color:Blue;">As</span> Item <span style="color:Blue;">In</span> container _
        <span style="color:Blue;">Where</span> i.IndexNumber &gt; criteria _
        <span style="color:Blue;">Select</span> i</pre>
            <div class="codesnippet-meta">GoodPerformance.vb: Bigger than
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/linq/Example-query-linq-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">var</span> result = <span style="color:Blue;">from</span> Item i <span style="color:Blue;">in</span> container
             <span style="color:Blue;">where</span> i.IndexNumber &gt; biggerThanThis
                   &amp;&amp; i.IndexNumber &lt; smallerThanThis
             <span style="color:Blue;">select</span> i;</pre>
            <div class="codesnippet-meta">GoodPerformance.cs: In between
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/linq/Example-query-linq-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">Dim</span> result = <span style="color:Blue;">From</span> i <span style="color:Blue;">As</span> Item <span style="color:Blue;">In</span> container _
        <span style="color:Blue;">Where</span> i.IndexNumber &gt; biggerThanThis _
        <span style="color:Blue;">AndAlso</span> i.IndexNumber &lt; smallerThanThis _
        <span style="color:Blue;">Select</span> i</pre>
            <div class="codesnippet-meta">GoodPerformance.vb: In between
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/linq/Example-query-linq-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h3>Date Queries</h3>
        <p>Operations on dates are also fast.</p>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">var</span> result = <span style="color:Blue;">from</span> Item i <span style="color:Blue;">in</span> container
             <span style="color:Blue;">where</span> i.IndexDate == date
             <span style="color:Blue;">select</span> i;</pre>
            <div class="codesnippet-meta">GoodPerformance.cs: Date comparisons are also fast
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/linq/Example-query-linq-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">Dim</span> result = <span style="color:Blue;">From</span> i <span style="color:Blue;">As</span> Item <span style="color:Blue;">In</span> container _
        <span style="color:Blue;">Where</span> i.IndexDate = dateToFind _
        <span style="color:Blue;">Select</span> i</pre>
            <div class="codesnippet-meta">GoodPerformance.vb: Date comparisons are also fast
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/linq/Example-query-linq-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">var</span> result = <span style="color:Blue;">from</span> Item i <span style="color:Blue;">in</span> container
             <span style="color:Blue;">where</span> i.IndexDate &gt; date
             <span style="color:Blue;">select</span> i;</pre>
            <div class="codesnippet-meta">GoodPerformance.cs: Find a newer date
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/linq/Example-query-linq-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">Dim</span> result = <span style="color:Blue;">From</span> i <span style="color:Blue;">As</span> Item <span style="color:Blue;">In</span> container _
        <span style="color:Blue;">Where</span> i.IndexDate &gt; newerThanThis _
        <span style="color:Blue;">Select</span> i</pre>
            <div class="codesnippet-meta">GoodPerformance.vb: Find a newer date
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/linq/Example-query-linq-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h2><a name="BadPerf"></a>Bad Performance Characteristics</h2>
        <p>Here's an overview of the query operations with bad performances characteristics. The reason is that db4o cannot utilize indexes to perform these queries. Or that the LINQ query optimizer cannot translate the query to SODA. That means the  query time grows linearly with the amount of data. </p>
        <h3>String Operations: Like, Contains, StartsWith, Ends With</h3>
        <p>All string operations beside the simple equals operation cannot use indexes at the moment. Therefore all string operations like contains, like, starts with etc. run slowly. Advanced string operations are not translated to SODA and therefore run even more slowly.</p>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">var</span> result = <span style="color:Blue;">from</span> Item i <span style="color:Blue;">in</span> container
             <span style="color:Blue;">where</span> i.IndexedString.Contains(criteria)
             <span style="color:Blue;">select</span> i;</pre>
            <div class="codesnippet-meta">BadPerformance.cs: Contains is slow
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/linq/Example-query-linq-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">Dim</span> result = <span style="color:Blue;">From</span> i <span style="color:Blue;">As</span> Item <span style="color:Blue;">In</span> container _
        <span style="color:Blue;">Where</span> i.IndexedString.Contains(criteria) _
        <span style="color:Blue;">Select</span> i</pre>
            <div class="codesnippet-meta">BadPerformance.vb: Contains is slow
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/linq/Example-query-linq-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h3>Queries on Collections / Arrays</h3>
        <p>Any query which does contains operations on collections/arrays or navigates across a collection/array field will run slowly. The reason is that db4o cannot index collections. Furthermore the LINQ query optimizer may doesn't recognize such a query and just loads all objects to process the query.</p>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">var</span> result = <span style="color:Blue;">from</span> CollectionHolder h <span style="color:Blue;">in</span> container
             <span style="color:Blue;">where</span> h.Items.Contains(itemToQueryFor)
             <span style="color:Blue;">select</span> h;</pre>
            <div class="codesnippet-meta">BadPerformance.cs: Contains on collection
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/linq/Example-query-linq-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">Dim</span> result = <span style="color:Blue;">From</span> h <span style="color:Blue;">As</span> CollectionHolder <span style="color:Blue;">In</span> container _
    <span style="color:Blue;">Where</span> h.Items.Contains(itemToQueryFor) _
    <span style="color:Blue;">Select</span> h</pre>
            <div class="codesnippet-meta">BadPerformance.vb: Contains on collection
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/linq/Example-query-linq-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">var</span> result = <span style="color:Blue;">from</span> CollectionHolder h <span style="color:Blue;">in</span> container
             <span style="color:Blue;">where</span> h.Items.Any(i =&gt; i.IndexedString == criteria)
             <span style="color:Blue;">select</span> h;</pre>
            <div class="codesnippet-meta">BadPerformance.cs: Nagivating into collection
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/linq/Example-query-linq-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">Dim</span> result = <span style="color:Blue;">From</span> h <span style="color:Blue;">As</span> CollectionHolder <span style="color:Blue;">In</span> container _
                        <span style="color:Blue;">Where</span> h.Items.<span style="color:Blue;">Any</span>(<span style="color:Blue;">Function</span>(i) i.IndexedString = criteria) _
                        <span style="color:Blue;">Select</span> h</pre>
            <div class="codesnippet-meta">BadPerformance.vb: Nagivating into collection
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/linq/Example-query-linq-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h3>Calling Complex Methods / Properties</h3>
        <p>Calling complex methods or properties in LINQ queries is a bad idea. For example when a property fires an event in the getter, then the query accessing it won't be optimized. The same is true when you call complex methods in the query.</p>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">var</span> result = <span style="color:Blue;">from</span> Item i <span style="color:Blue;">in</span> container
             <span style="color:Blue;">where</span> i.PropertyWhichFiresEvent == criteria
             <span style="color:Blue;">select</span> i;</pre>
            <div class="codesnippet-meta">BadPerformance.cs: Complex property
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/linq/Example-query-linq-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">Dim</span> result = <span style="color:Blue;">From</span> i <span style="color:Blue;">As</span> Item <span style="color:Blue;">In</span> container _
        <span style="color:Blue;">Where</span> i.PropertyWhichFiresEvent = criteria _
        <span style="color:Blue;">Select</span> i</pre>
            <div class="codesnippet-meta">BadPerformance.vb: Complex property
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/linq/Example-query-linq-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.c#">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">var</span> result = <span style="color:Blue;">from</span> Item i <span style="color:Blue;">in</span> container
             <span style="color:Blue;">where</span> i.ComplexMethod()
             <span style="color:Blue;">select</span> i;</pre>
            <div class="codesnippet-meta">BadPerformance.cs: Calling a method
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/linq/Example-query-linq-csharp.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.VB.NET">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">Dim</span> result = <span style="color:Blue;">From</span> i <span style="color:Blue;">As</span> Item <span style="color:Blue;">In</span> container _
        <span style="color:Blue;">Where</span> i.ComplexMethod() _
        <span style="color:Blue;">Select</span> i</pre>
            <div class="codesnippet-meta">BadPerformance.vb: Calling a method
			<div class="codedownload"><a href="../../../CodeExamples/performance/query/linq/Example-query-linq-vb.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h2><a name="Detect"></a>Detect Slow Queries</h2>
        <p>The best indication that a query is slow is when it cannot use any field index. Install a <a href="../../../advanced_topics/diagnostics.htm">diagnostic listener and look for the LoadedFromClassIndex</a> message. That message indicates that a query couldn't use any field index for its execution.</p>
        <p>Also read about the LINQ optimization and how you can write queries which run efficiently and still use advanced LINQ&#160;features. <a href="optimization.htm" target="" title="" alt="" class="MCXref" xrefformat="See &quot;{paratext}&quot;">See "LINQ Optimization"</a></p>
        <script src="../../../Resources/Code/jquery.min.js">
        </script>
        <script src="../../../Resources/Code/ZeroClipboard.js">
        </script>
        <script type="text/javascript">/* <![CDATA[ */
window.onload = function(){
	var pathToFlash = $('html').attr('MadCap:PathToHelpSystem') + 'Content/Resources/Code/ZeroClipboard.swf';
	ZeroClipboard.setMoviePath(pathToFlash);
			
	function bindToClipBord(element,content){
		var clip = new ZeroClipboard.Client();
		clip.setText(content);
		clip.glue(element);
	};
		
	if(location.protocol==='file:'){
		$('.copylink-marker').remove();
	} else{
			$('.copylink-marker').each(function(){
				var text = $(this).parent().parent().children('.prettyprint').text();
				$(this).hover(function(){
					bindToClipBord(this,text);
				},
				function(){});
			});	
	}		
};
                /* ]]> */</script>
        <script type="text/javascript" src="../../../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>